# -*- coding: utf-8 -*-
"""t_utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VR_jEDY2cvkOmQNU3m5hkCnr3WDNklPo
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime
import random
import string

def calculate_checksum(line):
    """Calculate TLE checksum"""
    s = 0
    for char in line[:68]:
        if char.isdigit():
            s += int(char)
        elif char == '-':
            s += 1
    return s % 10

def generate_random_launch_info():
    """Generate random launch year, number, and piece for diversity"""
    # Random launch year (last 5 years)
    current_year = datetime.now().year
    launch_years = list(range(current_year - 4, current_year + 1))
    launch_year = random.choice(launch_years)

    # Random launch number (1-999)
    launch_number = random.randint(1, 999)

    # Random launch piece (A-Z, AA-ZZ pattern)
    pieces = [chr(i) for i in range(ord('A'), ord('Z') + 1)]
    pieces.extend([chr(i) + chr(j) for i in range(ord('A'), ord('Z') + 1)
                   for j in range(ord('A'), ord('Z') + 1)])
    launch_piece = random.choice(pieces)

    return launch_year % 100, launch_number, launch_piece

def generate_constellation_tle(altitude, inclination, num_planes, sats_per_plane, walker_F):
    """
    Generate TLE data for a Walker constellation

    Parameters:
    - altitude: Satellite altitude in km
    - inclination: Orbital inclination in degrees
    - num_planes: Number of orbital planes
    - sats_per_plane: Number of satellites per plane
    - walker_F: Walker F parameter (phasing factor)

    Returns:
    - tle_lines: List of TLE lines
    - constellation_data: Dictionary with constellation parameters
    """

    # Constants
    Re = 6378.137  # Earth radius (km)
    mu = 398600.4418  # Earth gravitational parameter (km^3/s^2)

    # Calculate orbital parameters
    a = Re + altitude  # semi-major axis (km)
    n = np.sqrt(mu / a**3) * 86400 / (2 * np.pi)  # mean motion (rev/day)
    e = 0.0  # circular orbit
    omega = 0  # argument of perigee (deg)

    # Epoch calculation
    current_date = datetime.now()
    epoch_year = current_date.year % 100
    day_of_year = current_date.timetuple().tm_yday
    hour_fraction = (current_date.hour + current_date.minute/60 +
                    current_date.second/3600) / 24
    epoch_day = day_of_year + hour_fraction

    # Constellation parameters
    total_sats = num_planes * sats_per_plane
    delta_raan = 360 / num_planes
    phase_unit = (walker_F * 360) / total_sats

    # Storage for TLE lines and satellite data
    tle_lines = []
    sat_data = []

    # Generate diverse NORAD IDs (avoid clustering around 90000)
    base_ids = list(range(90000, 99999))
    random.shuffle(base_ids)
    norad_ids = base_ids[:total_sats]

    sat_counter = 0

    for plane in range(num_planes):
        # RAAN for this plane
        raan = (plane * delta_raan) % 360

        # Walker phase offset for this plane
        walker_phase_offset = (plane * phase_unit) % 360

        for sat in range(sats_per_plane):
            # Mean anomaly within the plane
            in_plane_spacing = 360 / sats_per_plane
            M = (sat * in_plane_spacing + walker_phase_offset) % 360

            # Get unique identifiers for this satellite
            sat_number = norad_ids[sat_counter]
            launch_year, launch_number, launch_piece = generate_random_launch_info()

            # Satellite name
            sat_name = f"KUIPER_{plane+1:03d}_{sat+1:02d}"

            # Create epoch string
            epoch_str = f"{epoch_year:02d}{epoch_day:012.8f}"

            # Line 1
            line1_body = (f"1 {sat_number:05d}U {launch_year:02d}"
                         f"{launch_number:03d}{launch_piece:<3s} {epoch_str} "
                         f" .00000000  00000+0  00000-0 0  9999")

            # Ensure exactly 68 characters
            line1_body = line1_body[:68].ljust(68)
            chk1 = calculate_checksum(line1_body)
            line1 = line1_body + str(chk1)

            # Line 2
            line2_body = (f"2 {sat_number:05d} {inclination:8.4f} {raan:8.4f} "
                         f"{int(e*1e7):07d} {omega:8.4f} {M:8.4f} "
                         f"{n:11.8f}    1")

            # Ensure exactly 68 characters
            line2_body = line2_body[:68].ljust(68)
            chk2 = calculate_checksum(line2_body)
            line2 = line2_body + str(chk2)

            # Add to results
            tle_lines.extend([sat_name, line1, line2])

            # Store satellite data for analysis
            sat_data.append({
                'plane': plane + 1,
                'sat': sat + 1,
                'norad_id': sat_number,
                'raan': raan,
                'mean_anomaly': M,
                'name': sat_name
            })

            sat_counter += 1

    # Create constellation data summary
    constellation_data = {
        'total_satellites': total_sats,
        'num_planes': num_planes,
        'sats_per_plane': sats_per_plane,
        'walker_F': walker_F,
        'altitude': altitude,
        'inclination': inclination,
        'mean_motion': n,
        'orbital_period': 1440 / n,  # minutes
        'raan_spacing': delta_raan,
        'phase_unit': phase_unit,
        'epoch_year': epoch_year,
        'epoch_day': epoch_day,
        'satellite_data': sat_data
    }

    return tle_lines, constellation_data

def create_constellation_plots(constellation_data):
    """Create visualization plots for the constellation"""

    sat_data = constellation_data['satellite_data']
    df = pd.DataFrame(sat_data)

    # Create figure with subplots
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))

    # Plot 1: RAAN vs Mean Anomaly
    scatter = ax1.scatter(df['raan'], df['mean_anomaly'],
                         c=df['plane'], cmap='tab20', alpha=0.7, s=30)
    ax1.set_xlabel('RAAN (degrees)')
    ax1.set_ylabel('Mean Anomaly (degrees)')
    ax1.set_title('Satellite Distribution in RAAN-MA Space')
    ax1.grid(True, alpha=0.3)
    ax1.set_xlim(0, 360)
    ax1.set_ylim(0, 360)
    plt.colorbar(scatter, ax=ax1, label='Plane Number')

    # Plot 2: Ground Track Pattern (simplified)
    lons = []
    lats = []
    for _, sat in df.iterrows():
        # Simplified ground track approximation
        lon = (sat['raan'] + sat['mean_anomaly']) % 360
        lat = np.arcsin(np.sin(np.radians(constellation_data['inclination'])) *
                       np.sin(np.radians(sat['mean_anomaly']))) * 180/np.pi
        lons.append(lon)
        lats.append(lat)

    scatter2 = ax2.scatter(lons, lats, c=df['plane'], cmap='tab20', alpha=0.7, s=20)
    ax2.set_xlabel('Longitude (degrees)')
    ax2.set_ylabel('Latitude (degrees)')
    ax2.set_title(f'Ground Track Pattern\nWalker {constellation_data["total_satellites"]}'
                 f'/{constellation_data["num_planes"]}/{constellation_data["walker_F"]}')
    ax2.grid(True, alpha=0.3)
    ax2.set_xlim(0, 360)
    ax2.set_ylim(-40, 40)

    # Plot 3: Satellites per Plane
    plane_counts = df['plane'].value_counts().sort_index()
    ax3.bar(plane_counts.index, plane_counts.values, color='skyblue', alpha=0.7)
    ax3.set_xlabel('Plane Number')
    ax3.set_ylabel('Number of Satellites')
    ax3.set_title('Satellites Distribution by Plane')
    ax3.grid(True, alpha=0.3)

    # Plot 4: RAAN Distribution
    ax4.hist(df['raan'], bins=min(30, constellation_data['num_planes']),
             color='lightgreen', alpha=0.7, edgecolor='black')
    ax4.set_xlabel('RAAN (degrees)')
    ax4.set_ylabel('Number of Satellites')
    ax4.set_title('RAAN Distribution')
    ax4.grid(True, alpha=0.3)

    plt.tight_layout()
    return fig

def generate_tle_file_content(tle_lines):
    """Generate TLE file content as string"""
    return '\r\n'.join(tle_lines) + '\r\n'

def create_validation_report(constellation_data):
    """Create a validation report"""
    report = f"""Kuiper Constellation TLE Validation Report
==========================================

Constellation Parameters:
- Walker notation: {constellation_data['total_satellites']}/{constellation_data['num_planes']}/{constellation_data['walker_F']}
- Altitude: {constellation_data['altitude']} km
- Inclination: {constellation_data['inclination']} degrees
- Eccentricity: 0.000
- Mean motion: {constellation_data['mean_motion']:.8f} rev/day
- Orbital period: {constellation_data['orbital_period']:.2f} minutes

Distribution Statistics:
- RAAN spacing: {constellation_data['raan_spacing']:.4f} degrees
- In-plane spacing: {360/constellation_data['sats_per_plane']:.4f} degrees
- Walker phase unit: {constellation_data['phase_unit']:.4f} degrees
- Number of unique RAAN values: {constellation_data['num_planes']}

TLE Format Details:
- Epoch year: {constellation_data['epoch_year']:02d}
- Epoch day: {constellation_data['epoch_day']:.8f}
- NORAD ID range: Randomized (90000-99999)
- Launch info: Randomized for diversity
- Line ending: CR+LF (Windows compatible)

NCAT Configuration Recommendations:
- Min el angle UT [째]: 25
- Min el angle GW [째]: 10
- ISLs: None (or Disabled)

Note: Elevation angles affect coverage analysis results!
- UT (User Terminal): 25째 balances coverage vs link quality
- GW (Gateway): 10째 allows longer satellite visibility
- Lower angles = larger coverage area but weaker signals
- Higher angles = smaller coverage area but stronger signals
"""
    return report